TOKEN: T_PROG           LEXEME: program
N_PROGLBL -> T_PROG

___Entering new scope...

TOKEN: T_IDENT          LEXEME: p
TOKEN: T_SCOLON         LEXEME: ;
N_PROG -> N_PROGLBL T_IDENT T_SCOLON N_BLOCK T_DOT
___Adding p to symbol table with type PROGRAM
TOKEN: T_VAR            LEXEME: var
TOKEN: T_IDENT          LEXEME: i
N_IDENT -> T_IDENT
TOKEN: T_COLON          LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT            LEXEME: integer
N_SIMPLE -> T_INT
N_TYPE -> N_SIMPLE
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
___Adding i to symbol table with type INTEGER
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_IDENT          LEXEME: b
N_IDENT -> T_IDENT
TOKEN: T_COLON          LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_BOOL           LEXEME: boolean
N_SIMPLE -> T_BOOL
N_TYPE -> N_SIMPLE
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
___Adding b to symbol table with type BOOLEAN
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_IDENT          LEXEME: c
N_IDENT -> T_IDENT
TOKEN: T_COLON          LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_CHAR           LEXEME: char
N_SIMPLE -> T_CHAR
N_TYPE -> N_SIMPLE
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
___Adding c to symbol table with type CHAR
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_BEGIN          LEXEME: begin
N_VARDECLST -> epsilon
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDECPART -> T_VAR N_VARDEC T_SCOLON N_VARDECLST
N_PROCDECPART -> epsilon
TOKEN: T_IDENT          LEXEME: b
TOKEN: T_ASSIGN         LEXEME: :=
N_VARIDENT -> T_IDENT
N_ENTIREVAR -> N_VARIDENT
N_VARIABLE -> N_ENTIREVAR
TOKEN: T_LPAREN         LEXEME: (
TOKEN: T_IDENT          LEXEME: i
N_SIGN -> epsilon
N_VARIDENT -> T_IDENT
N_ENTIREVAR -> N_VARIDENT
TOKEN: T_GT             LEXEME: >
N_VARIABLE -> N_ENTIREVAR
N_FACTOR -> N_SIGN N_VARIABLE
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_RELOP -> T_GT
TOKEN: T_INTCONST       LEXEME: 5
N_SIGN -> epsilon
N_INTCONST -> N_SIGN T_INTCONST
N_CONST -> N_INTCONST
N_FACTOR -> N_CONST
TOKEN: T_RPAREN         LEXEME: )
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR N_RELOP N_SIMPLEEXPR
N_FACTOR -> T_LPAREN N_EXPR T_RPAREN
TOKEN: T_OR             LEXEME: or
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOP_LOGICAL -> T_OR
N_ADDOP -> N_ADDOP_LOGICAL
TOKEN: T_LPAREN         LEXEME: (
TOKEN: T_IDENT          LEXEME: c
N_SIGN -> epsilon
N_VARIDENT -> T_IDENT
N_ENTIREVAR -> N_VARIDENT
TOKEN: T_EQ             LEXEME: =
N_VARIABLE -> N_ENTIREVAR
N_FACTOR -> N_SIGN N_VARIABLE
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_RELOP -> T_EQ
TOKEN: T_INTCONST       LEXEME: 65
N_SIGN -> epsilon
N_INTCONST -> N_SIGN T_INTCONST
N_CONST -> N_INTCONST
N_FACTOR -> N_CONST
TOKEN: T_RPAREN         LEXEME: )
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR N_RELOP N_SIMPLEEXPR
Line 12: Expressions must both be int, or both char, or both boolean
