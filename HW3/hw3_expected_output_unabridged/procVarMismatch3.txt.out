TOKEN: T_PROG           LEXEME: program
N_PROGLBL -> T_PROG

___Entering new scope...

TOKEN: T_IDENT          LEXEME: p
TOKEN: T_SCOLON         LEXEME: ;
N_PROG -> N_PROGLBL T_IDENT T_SCOLON N_BLOCK T_DOT
___Adding p to symbol table with type PROGRAM
TOKEN: T_VAR            LEXEME: var
TOKEN: T_IDENT          LEXEME: x
N_IDENT -> T_IDENT
TOKEN: T_COLON          LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_INT            LEXEME: integer
N_SIMPLE -> T_INT
N_TYPE -> N_SIMPLE
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
___Adding x to symbol table with type INTEGER
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_IDENT          LEXEME: A
N_IDENT -> T_IDENT
TOKEN: T_COLON          LEXEME: :
N_IDENTLST -> epsilon
TOKEN: T_ARRAY          LEXEME: array
TOKEN: T_LBRACK         LEXEME: [
TOKEN: T_INTCONST       LEXEME: 1
N_SIGN -> epsilon
N_INTCONST -> N_SIGN T_INTCONST
N_IDX -> N_INTCONST
TOKEN: T_DOTDOT         LEXEME: ..
TOKEN: T_INTCONST       LEXEME: 5
N_SIGN -> epsilon
N_INTCONST -> N_SIGN T_INTCONST
N_IDX -> N_INTCONST
N_IDXRANGE -> N_IDX T_DOTDOT N_IDX
TOKEN: T_RBRACK         LEXEME: ]
TOKEN: T_OF             LEXEME: of
TOKEN: T_INT            LEXEME: integer
N_SIMPLE -> T_INT
N_ARRAY -> T_ARRAY T_LBRACK N_IDXRANGE T_RBRACK T_OF N_SIMPLE
N_TYPE -> N_ARRAY
N_VARDEC -> N_IDENT N_IDENTLST T_COLON N_TYPE
___Adding A to symbol table with type ARRAY 1 .. 5 OF INTEGER
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_PROC           LEXEME: procedure
N_VARDECLST -> epsilon
N_VARDECLST -> N_VARDEC T_SCOLON N_VARDECLST
N_VARDECPART -> T_VAR N_VARDEC T_SCOLON N_VARDECLST
TOKEN: T_IDENT          LEXEME: proc
TOKEN: T_SCOLON         LEXEME: ;
N_PROCHDR -> T_PROC T_IDENT T_SCOLON
___Adding proc to symbol table with type PROCEDURE

___Entering new scope...

TOKEN: T_BEGIN          LEXEME: begin
N_VARDECPART -> epsilon
N_PROCDECPART -> epsilon
TOKEN: T_WRITE          LEXEME: write
TOKEN: T_LPAREN         LEXEME: (
TOKEN: T_CHARCONST      LEXEME: 'p'
N_CONST -> T_CHARCONST
N_FACTOR -> N_CONST
TOKEN: T_COMMA          LEXEME: ,
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR
N_OUTPUT -> N_EXPR
TOKEN: T_CHARCONST      LEXEME: 'r'
N_CONST -> T_CHARCONST
N_FACTOR -> N_CONST
TOKEN: T_COMMA          LEXEME: ,
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR
N_OUTPUT -> N_EXPR
TOKEN: T_CHARCONST      LEXEME: 'o'
N_CONST -> T_CHARCONST
N_FACTOR -> N_CONST
TOKEN: T_COMMA          LEXEME: ,
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR
N_OUTPUT -> N_EXPR
TOKEN: T_CHARCONST      LEXEME: 'c'
N_CONST -> T_CHARCONST
N_FACTOR -> N_CONST
TOKEN: T_RPAREN         LEXEME: )
N_MULTOPLST -> epsilon
N_TERM -> N_FACTOR N_MULTOPLST
N_ADDOPLST -> epsilon
N_SIMPLEEXPR -> N_TERM N_ADDOPLST
N_EXPR -> N_SIMPLEEXPR
N_OUTPUT -> N_EXPR
N_OUTPUTLST -> epsilon
N_OUTPUTLST -> T_COMMA N_OUTPUT N_OUTPUTLST
N_OUTPUTLST -> T_COMMA N_OUTPUT N_OUTPUTLST
N_OUTPUTLST -> T_COMMA N_OUTPUT N_OUTPUTLST
N_WRITE -> T_WRITE T_LPAREN N_OUTPUT N_OUTPUTLST T_RPAREN
N_STMT -> N_WRITE
TOKEN: T_END            LEXEME: end
N_STMTLST -> epsilon
N_COMPOUND -> T_BEGIN N_STMT N_STMTLST T_END
N_STMTPART -> N_COMPOUND
N_BLOCK -> N_VARDECPART N_PROCDECPART N_STMTPART

___Exiting scope...

N_PROCDEC -> N_PROCHDR N_BLOCK
TOKEN: T_SCOLON         LEXEME: ;
TOKEN: T_BEGIN          LEXEME: begin
N_PROCDECPART -> epsilon
N_PROCDECPART -> N_PROCDEC T_SCOLON N_PROCDECPART
TOKEN: T_IDENT          LEXEME: A
TOKEN: T_LBRACK         LEXEME: [
N_VARIDENT -> T_IDENT
N_ENTIREVAR -> N_VARIDENT
N_ARRAYVAR -> N_ENTIREVAR
TOKEN: T_IDENT          LEXEME: proc
N_SIGN -> epsilon
N_VARIDENT -> T_IDENT
Line 16: Procedure/variable mismatch
